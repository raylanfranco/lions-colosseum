generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  fullName      String
  email         String   @unique
  phoneNumber   String
  password      String
  avatar        String?
  emailVerified DateTime?
  image         String?
  resetToken    String?
  resetTokenExpiry DateTime?

  role          Role     @default(USER) // ðŸ‘ˆ New field
  messagesSent      Message[] @relation("Sender")
  messagesReceived  Message[] @relation("Receiver")
  accounts          Account[]
  sessions          Session[]

  posts Post[] @relation("UserPosts")
  eventsCreated Event[] @relation("CreatedEvents")
}

enum Role {
  USER
  ADMIN
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  timestamp  DateTime @default(now())

  sender     User     @relation("Sender", fields: [senderId], references: [id])
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Event {
  id          String   @id @default(uuid())
  title       String
  photo       String?
  location    String
  price       Float    @default(0)
  description String
  startDate   DateTime
  endDate     DateTime?

  createdById String
  createdBy   User     @relation("CreatedEvents", fields: [createdById], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id        String   @id @default(uuid())
  content   String
  photo     String?
  createdAt DateTime @default(now())

  authorId  String
  author    User     @relation("UserPosts", fields: [authorId], references: [id])
}